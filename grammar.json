{
    "lex": {
        "rules": [
           ["\\s+",                    "/* skip whitespace */"],

           ["local",                   "return 'LOCAL';"],
           ["if",                      "return 'IF';"],
           ["while",                   "return 'WHILE';"],
           ["do",                      "return 'DO'"],
           ["then",                    "return 'THEN';"],
           ["end",                     "return 'END';"],

           ["[a-zA-Z_]\\w*",           "return 'IDENTIFIER';"],
           ["[0-9]+(?:\\.[0-9]+)?",    "return 'NUMBER';"],

           ["==|\\<=|\\>=|\\~=|\\<|\\>", "return 'COMPARATOR';"],

           ["=",                       "return '=';"],

           ["\\*",                     "return '*';"],
           ["\\/",                     "return '/';"],
           ["-",                       "return '-';"],
           ["\\+",                     "return '+';"],
           ["\\^",                     "return '^';"],
           ["\\(",                     "return '(';"],
           ["\\)",                     "return ')';"],
           ["PI\\b",                   "return 'PI';"],
           ["E\\b",                    "return 'E';"],
           ["$",                       "return 'EOF';"]
        ]
    },

    "operators": [
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["left", "^"],
        ["left", "UMINUS"]
    ],

    "start": "program",

    "bnf": {
        "program" :[
          [ "statementList EOF",       "return $1;"  ]
        ],

        "statementList": [
          ["statement",                "$$ = [$1];"],
          ["statement statementList",  "$$ = [$1].concat($2);"]
        ],

        "statement": [
          ["declaration", "$$ = $1"],
          ["if",          "$$ = $1"],
          ["while",       "$$ = $1"],
          ["assignment",  "$$ = $1"]
        ],

        "if": [
          ["IF expression THEN statementList END", "$$ = {type: 'if', condition: $2, body: $4};"]
        ],

        "while": [
          ["WHILE expression DO statementList END",
            "$$ = {type: 'while', condition: $2, body: $4}"]
        ],

        "expression": [
          ["comparison",              "$$ = $1;"],
          ["addition",                "$$ = $1;"],
          ["unitExpression",          "$$ = $1;"]
        ],

        "unitExpression": [
          ["( expression )",          "$$ = $2;"],
          ["NUMBER",                  "$$ = {type: 'number', value: $1};"],
          ["IDENTIFIER",              "$$ = {type: 'identifier', 'name': $1};"]
        ],

        "addition": [
          ["unitExpression + unitExpression",
            "$$ = {type: 'math', left: $1, right: $3, operator: $2};"]
        ],

        "comparison": [
          ["unitExpression COMPARATOR unitExpression",
            "$$ = {type: 'comparison', operator: $2, left: $1, right: $3};"]
        ],

        "declaration": [
          ["LOCAL IDENTIFIER = expression",
            "$$ = {type: 'declaration', identifier: $2, value: $4};"]
        ],

        "assignment": [
          ["IDENTIFIER = expression",
            "$$ = {type: 'assignment', identifier: $1, value: $3};"]
        ]
    }
}
